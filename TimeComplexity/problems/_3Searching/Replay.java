public class Replay {

  /*
   * 문제 1. 연결 요소의 개수 구하기
   * 방향 없는 그래프가 주어졌을 때 연결 요소(Connected component)의 개수를 구하는 프로그램을 작성하시오.
   * 
   * 입력 [
   *  1번째 줄에 노드의 개수 N(1 <= N <= 1000)과 에지의 개수 M(0 <= M <= N(N-1)/2),
   *  2번째 줄부터 M개의 줄에 에지의 양끝 점 u와 v가 주어진다.
   *  (1 <= u, v <= N, u ≠ v). 같은 에지는 한 번만 주어진다.
   * ]
   * 
   * 출력 [
   *  1번째 줄에 연결 요소의 개수를 출력한다.
   * ]
   */
  private static class DFS {
    private static void dfs(String[] args) {

    }
  }

  /*
   * 문제 2. 신기한 소수 찾기
   * 수빈이가 세상에서 가장 좋아하는 것은 소수이고, 취미는 소수를 이용해 노는 것이다.
   * 요즘 수빈이가 가장 관심 있어 하는 소수는 7331이다. 7331은 신기하게도 733도 소수,
   * 73도 소수, 7도 소수다. 즉, 왼쪽부터 1자리, 2자리, 3자리, 4자릿수 모두 소수다.
   * 수빈이는 이런 숫자를 신기한 소수라고 이름 붙였다. 수빈이는 N의 자리의 숫자 중
   * 어떤 수들이 신기한 소수인지 궁금해졌다. 숫자 N이 주어졌을 때 N의 자리 숫자 중
   * 신기한 소수를 모두 찾아보자.
   * 
   * 입력 [
   *  1번째 줄에 N(1 <= N <= 8)이 주어진다.
   * ]
   * 
   * 출력 [
   *  N의 자리 숫자 중 신기한 소수를 오름차순 정렬해 1줄에 1개씩 출력한다.
   * ]
   * 
   * dfs 로 풀어보자
   */
  private static class DFS2 {
    private static void dfs2(int args) {
      
    }
  }
  public static void main(String[] args) {
    // DFS.dfs(new String[]{"6 5", "1 2", "2 5", "5 1", "3 4", "4 6"});
    // DFS.dfs(new String[]{"6 8", "1 2", "2 5", "5 1", "3 4", "4 6", "5 4", "2 4", "2 3"});
    // DFS2.dfs2(4);    
  }
}
